/*
 * TesteProvisorio.java
 *
 * Created on 12 de Setembro de 2006, 12:36
 */
package investimento;

import java.util.Vector;
import javax.swing.ListSelectionModel;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;

/**
 *
 * @author  Deus
 */
public class InvestimentosFrame extends javax.swing.JFrame {

    TableModelInvestimentos model;
    String[][] data = null;
    String nomeInvestimentoSelecionadoTela = "";

    /** Creates new form TesteProvisorio */
    public InvestimentosFrame() {
        initComponents();
        model = new TableModelInvestimentos(getColunas());
        InvestimentoFacade investimentoFacade = new InvestimentoFacade();
        investimentoFacade.lerArquivoInvestimentos();
        this.setData(investimentoFacade.getArrayInvestimentos());
        this.updateData();


    }

    private String[] getColunas() {
        String[] colunas = new String[11];
        colunas[0] = "Investimento";
        colunas[1] = "Valor inicial";
        colunas[2] = "Aplic. mensal";
        colunas[3] = "Taxa % a.m.";
        colunas[4] = "Data início";
        colunas[5] = "Data fim";
        colunas[6] = "Qtd. anos";
        colunas[7] = "Valor Aplicado";
        colunas[8] = "Rend. R$";
        colunas[9] = "Rend. %";
        colunas[10] = "Valor Final";
        

        return colunas;
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        toolBarFerramentas = new javax.swing.JToolBar();
        cmdAdicionaInvestimento = new javax.swing.JButton();
        cmdAlterarInvestimento = new javax.swing.JButton();
        cmdRemoverInvestimento = new javax.swing.JButton();
        cmdAtualizar = new javax.swing.JButton();
        scrollPaneInvestimentos = new javax.swing.JScrollPane();
        tableInvestimentos = new javax.swing.JTable();
        status = new javax.swing.JTextField();
        menuBarPrincipal = new javax.swing.JMenuBar();
        menuAquivo = new javax.swing.JMenu();
        menuItemFecharPrograma = new javax.swing.JMenuItem();
        menuAjuda = new javax.swing.JMenu();
        menuItemSobre = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Investimentos");
        setBackground(new java.awt.Color(255, 255, 255));

        toolBarFerramentas.setRollover(true);
        toolBarFerramentas.setMargin(new java.awt.Insets(5, 5, 5, 5));

        cmdAdicionaInvestimento.setIcon(new javax.swing.ImageIcon(getClass().getResource("/investimento/imagens/investimento.png"))); // NOI18N
        cmdAdicionaInvestimento.setText("      Adicionar      ");
        cmdAdicionaInvestimento.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        cmdAdicionaInvestimento.setFocusable(false);
        cmdAdicionaInvestimento.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        cmdAdicionaInvestimento.setMargin(new java.awt.Insets(15, 15, 15, 15));
        cmdAdicionaInvestimento.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        cmdAdicionaInvestimento.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdAdicionaInvestimentoActionPerformed(evt);
            }
        });
        toolBarFerramentas.add(cmdAdicionaInvestimento);

        cmdAlterarInvestimento.setIcon(new javax.swing.ImageIcon(getClass().getResource("/investimento/imagens/atualizar.png"))); // NOI18N
        cmdAlterarInvestimento.setText("        Alterar       ");
        cmdAlterarInvestimento.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        cmdAlterarInvestimento.setEnabled(false);
        cmdAlterarInvestimento.setFocusable(false);
        cmdAlterarInvestimento.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        cmdAlterarInvestimento.setMargin(new java.awt.Insets(15, 15, 15, 15));
        cmdAlterarInvestimento.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        cmdAlterarInvestimento.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdAlterarInvestimentoActionPerformed(evt);
            }
        });
        toolBarFerramentas.add(cmdAlterarInvestimento);

        cmdRemoverInvestimento.setIcon(new javax.swing.ImageIcon(getClass().getResource("/investimento/imagens/excluir.png"))); // NOI18N
        cmdRemoverInvestimento.setText("        Remover        ");
        cmdRemoverInvestimento.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        cmdRemoverInvestimento.setEnabled(false);
        cmdRemoverInvestimento.setFocusable(false);
        cmdRemoverInvestimento.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        cmdRemoverInvestimento.setMargin(new java.awt.Insets(15, 15, 15, 15));
        cmdRemoverInvestimento.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        cmdRemoverInvestimento.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdRemoverInvestimentoActionPerformed(evt);
            }
        });
        toolBarFerramentas.add(cmdRemoverInvestimento);

        cmdAtualizar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/investimento/imagens/atualizar_lista.png"))); // NOI18N
        cmdAtualizar.setText("  Atualizar Tabela  ");
        cmdAtualizar.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        cmdAtualizar.setFocusable(false);
        cmdAtualizar.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        cmdAtualizar.setMargin(new java.awt.Insets(15, 15, 15, 15));
        cmdAtualizar.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        cmdAtualizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdAtualizarActionPerformed(evt);
            }
        });
        toolBarFerramentas.add(cmdAtualizar);

        getContentPane().add(toolBarFerramentas, java.awt.BorderLayout.NORTH);

        tableInvestimentos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Investimento", "Valor inicial", "Apl. mensal", "Taxa % a.m.", "Data início", "Data fim", "Qtd. anos", "Valor Aplicado", "Valor Final", "Rend. %", "Rend. R$"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tableInvestimentos.setSelectionBackground(new java.awt.Color(146, 188, 214));
        scrollPaneInvestimentos.setViewportView(tableInvestimentos);

        getContentPane().add(scrollPaneInvestimentos, java.awt.BorderLayout.CENTER);

        status.setEditable(false);
        getContentPane().add(status, java.awt.BorderLayout.SOUTH);

        menuAquivo.setText("Arquivo");

        menuItemFecharPrograma.setText("Fechar");
        menuItemFecharPrograma.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemFecharProgramaActionPerformed(evt);
            }
        });
        menuAquivo.add(menuItemFecharPrograma);

        menuBarPrincipal.add(menuAquivo);

        menuAjuda.setText("Ajuda");

        menuItemSobre.setText("Sobre o software");
        menuItemSobre.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemSobreActionPerformed(evt);
            }
        });
        menuAjuda.add(menuItemSobre);

        menuBarPrincipal.add(menuAjuda);

        setJMenuBar(menuBarPrincipal);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void menuItemFecharProgramaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItemFecharProgramaActionPerformed
// TODO add your handling code here:
       this.dispose();
    }//GEN-LAST:event_menuItemFecharProgramaActionPerformed

    private void menuItemSobreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItemSobreActionPerformed
// TODO add your handling code here:
        (new SobreFrame()).show();
    }//GEN-LAST:event_menuItemSobreActionPerformed

    private void cmdAtualizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdAtualizarActionPerformed
        // TODO add your handling code here:
        InvestimentoFacade investimentoFacade = new InvestimentoFacade();
        investimentoFacade.lerArquivoInvestimentos();
        this.setData(investimentoFacade.getArrayInvestimentos());
        this.updateData();



    }//GEN-LAST:event_cmdAtualizarActionPerformed

    public void disparaAtualizacao(java.awt.event.ActionEvent evt){
        this.cmdAtualizarActionPerformed(evt);

    }

    private void cmdRemoverInvestimentoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdRemoverInvestimentoActionPerformed
        // TODO add your handling code here:
        InvestimentoFacade investimentoFacade = new InvestimentoFacade();
        investimentoFacade.lerArquivoInvestimentos();
        // remove elemento da lista

        for (int i = 0; i < investimentoFacade.getVetorInvestimentos().size(); i++) {
            if (((Investimento) investimentoFacade.getVetorInvestimentos().get(i)).getNome().equals(nomeInvestimentoSelecionadoTela)) {
                investimentoFacade.getVetorInvestimentos().remove(i);
                investimentoFacade.gravarArquivoInvestimentos();
                i = investimentoFacade.getVetorInvestimentos().size() + 1;
            }

        }
        //
        investimentoFacade.lerArquivoInvestimentos();

        this.setData(investimentoFacade.getArrayInvestimentos());
        this.updateData();

    }//GEN-LAST:event_cmdRemoverInvestimentoActionPerformed

    private void cmdAdicionaInvestimentoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdAdicionaInvestimentoActionPerformed
        // TODO add your handling code here:
          (new SimuladorRendimentosFrame(this,SimuladorRendimentosFrame.ADICIONAR, null)).setVisible(true);
          this.cmdAtualizarActionPerformed(evt);
    }//GEN-LAST:event_cmdAdicionaInvestimentoActionPerformed

    private void cmdAlterarInvestimentoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdAlterarInvestimentoActionPerformed
        // TODO add your handling code here:
         // TODO add your handling code here:
        InvestimentoFacade investimentoFacade = new InvestimentoFacade();
        investimentoFacade.lerArquivoInvestimentos();
        // remove elemento da lista

        for (int i = 0; i < investimentoFacade.getVetorInvestimentos().size(); i++) {
            if (((Investimento) investimentoFacade.getVetorInvestimentos().get(i)).getNome().equals(nomeInvestimentoSelecionadoTela)) {
                (new SimuladorRendimentosFrame(this, SimuladorRendimentosFrame.ATUALIZAR,(Investimento) investimentoFacade.getVetorInvestimentos().get(i))).setVisible(true);
                i = investimentoFacade.getVetorInvestimentos().size() + 1;
            }

        }
        //
          this.cmdAtualizarActionPerformed(evt);
         
    }//GEN-LAST:event_cmdAlterarInvestimentoActionPerformed
    // deve ser excluido
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton cmdAdicionaInvestimento;
    private javax.swing.JButton cmdAlterarInvestimento;
    private javax.swing.JButton cmdAtualizar;
    private javax.swing.JButton cmdRemoverInvestimento;
    private javax.swing.JMenu menuAjuda;
    private javax.swing.JMenu menuAquivo;
    private javax.swing.JMenuBar menuBarPrincipal;
    private javax.swing.JMenuItem menuItemFecharPrograma;
    private javax.swing.JMenuItem menuItemSobre;
    private javax.swing.JScrollPane scrollPaneInvestimentos;
    private javax.swing.JTextField status;
    private javax.swing.JTable tableInvestimentos;
    private javax.swing.JToolBar toolBarFerramentas;
    // End of variables declaration//GEN-END:variables

    /**
     * @return Returns the data.
     */
    public String[][] getData() {
        return data;
    }

    /**
     * @param data The data to set.
     */
    public void setData(String[][] data) {
        this.data = data;
    }

    public void updateData() {
        model.setData(getData());
        this.tableInvestimentos.setModel(model);
        this.tableInvestimentos.setEnabled(true);
        this.tableInvestimentos.setRowSelectionAllowed(true);

        this.tableInvestimentos.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        //
        ListSelectionModel rowSM = this.tableInvestimentos.getSelectionModel();
        rowSM.addListSelectionListener(new ListSelectionListener() {

            public void valueChanged(ListSelectionEvent e) {
                //Ignore extra messages.
                if (e.getValueIsAdjusting()) {
                    return;
                }

                ListSelectionModel lsm = (ListSelectionModel) e.getSource();
                if (!lsm.isSelectionEmpty()) {
                    int selectedRow = lsm.getMinSelectionIndex();
                    if (!((String) model.getValueAt(selectedRow, 0)).equals("<< TOTAIS >>")) {
                        //    (new GraficoFrame((String) model.getValueAt(selectedRow,1))).setVisible(true);
                        cmdAlterarInvestimento.setEnabled(true);
                        cmdRemoverInvestimento.setEnabled(true);
                        nomeInvestimentoSelecionadoTela = (String) model.getValueAt(selectedRow, 0);
                    } else {
                        lsm.clearSelection();
                        nomeInvestimentoSelecionadoTela = "";
                    }


                } else {
                    cmdAlterarInvestimento.setEnabled(false);
                    cmdRemoverInvestimento.setEnabled(false);
                    nomeInvestimentoSelecionadoTela = "";
                    lsm.clearSelection();
                }
            }
        });
        //

        this.tableInvestimentos.doLayout();
    }

    public void escrevaNoStatus(String s) {
        this.status.setText(">> " + s);
    }
}
